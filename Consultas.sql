-- # ProyectoSQL -- Primeras consultas realizadas

-- ======================================== -- üîç DataProject: L√≥gica de Consultas SQL -- ========================================

-- 2 Mostrar los nombres de todas las pel√≠culas con clasificaci√≥n por edades 'R'

SELECT title AS "T√≠tulo" 
FROM film 
WHERE rating = 'R';

-- 3 Encontrar los nombres de los actores con ‚Äúactor_id‚Äù entre 30 y 40 

SELECT 
	actor_id AS "ID", 
	first_name AS "Nombre", 
	last_name AS "Apellido" 
FROM actor
WHERE actor_id BETWEEN 30 AND 40;

-- 4 Obtener las pel√≠culas cuyo idioma coincide con el idioma original 

SELECT 
	title AS "T√≠tulo", 
	language_id AS "Idioma", 
	original_language_id AS "Idioma Original" 
FROM film
WHERE language_id = original_language_id;

-- 5. Ordena las pel√≠culas por duraci√≥n de forma ascendente.

SELECT 
	title AS "Nombre de la pel√≠cula", 
	length AS "Duraci√≥n" 
FROM "film" 
ORDER BY "length";

-- 6 Encontrar el nombre y apellido de los actores cuyo apellido es ‚ÄòAllen‚Äô 

SELECT 
	first_name AS "Nombre", 
	last_name AS "Apellido" 
FROM actor
WHERE LOWER(last_name) = LOWER('Allen');

-- 7. Encuentra la cantidad total de pel√≠culas en cada clasificaci√≥n de la tabla ‚Äúfilm‚Äù y muestra la clasificaci√≥n junto con el recuento.

SELECT 
	"rating" AS "Clasificaci√≥n", COUNT(*) AS "Cantidad de Pel√≠culas" 
FROM "film" 
GROUP BY "rating";

-- 8. Encuentra el t√≠tulo de todas las pel√≠culas que son ‚ÄòPG-13‚Äô o tienen una duraci√≥n mayor a 3 horas en la tabla film.
SELECT 
	title AS "Pel√≠cula", 
	rating AS "Clasificaci√≥n", 
	length AS "Duraci√≥n" 
FROM film 
WHERE rating = 'PG-13' OR length > 180;

-- 9. Encuentra la variabilidad de lo que costar√≠a reemplazar las pel√≠culas.

SELECT VAR_SAMP(replacement_cost) AS "Varianza del costo de reemplazo" 
FROM film;

-- 10. Encontrar la mayor y menor duraci√≥n de una pel√≠cula 

SELECT 
MIN(length) AS "Duraci√≥n m√≠nima", 
MAX(length) AS "Duraci√≥n m√°xima" 
FROM film;

-- 11. Encuentra lo que cost√≥ el antepen√∫ltimo alquiler ordenado por d√≠a.

SELECT 
R.rental_date AS "Fecha de alquiler", 
P.amount AS "Monto pagado" 
FROM rental AS R 
JOIN payment AS P 
	ON R.rental_id = P.rental_id
ORDER BY R.rental_date DESC OFFSET 2 
LIMIT 1;

--  12. Encuentra el t√≠tulo de las pel√≠culas en la tabla ‚Äúfilm‚Äù que no sean ni ‚ÄòNC-17‚Äô ni ‚ÄòG‚Äô en cuanto a su clasificaci√≥n.‚Äô 

SELECT 
	title AS "T√≠tulo", 
	rating AS "Clasificaci√≥n" 
FROM film
WHERE rating NOT IN ('NC-17', 'G');

-- 13. Encuentra el promedio de duraci√≥n de las pel√≠culas para cada clasificaci√≥n de la  tabla film y muestra la clasificaci√≥n junto con el promedio de duraci√≥n.Encuentra el promedio de duraci√≥n de las pel√≠culas para cada clasificaci√≥n de la tabla film y muestra la clasificaci√≥n junto con el promedio de duraci√≥n.

select rating as "Clasificaci√≥n",
	Round(AVG(length), 2) as "promedio de duraci√≥n"
from film as "Pel√≠cula"
group by rating
order by rating;

-- 14.Encuentra el t√≠tulo de todas las pel√≠culas que tengan una duraci√≥n mayor a 180 minutos.
select title as "titulo",
		length as "Duraci√≥n"
from film
where length >180
order by length 


-- 15. ¬øCu√°nto dinero ha generado en total la empresa?

select SUM(amount) as "Total generado"
from payment;

-- 16. Muestra los 10 clientes con mayor valor de id.

select customer_id as "Cliente"
from customer
order by customer_id DESC 
limit 10;

-- 17. Encuentra el nombre y apellido de los actores que aparecen en la pel√≠cula con t√≠tulo ‚ÄòEgg Igby‚Äô

select A.first_name AS nombre,
       A.last_name  AS apellido,
       F.title 
from film as F
inner JOIN film_actor as FA 
	ON F.film_id  = FA.film_id
inner JOIN actor as A 
	ON FA.actor_id = A.actor_id
WHERE LOWER(f.title) = LOWER('Egg Igby');

-- 18. Selecciona todos los nombres de las pel√≠culas √∫nicos.

select distinct title as "T√≠tulo"
from "film";ayor a 180 minutos en la tabla ‚Äúfilm‚Äù


-- 20. Encuentra las categor√≠as de pel√≠culas que tienen un promedio de duraci√≥n superior a 110 minutos y muestra el nombre de la categor√≠a junto con el promedio de duraci√≥n

SELECT
	C.name as "Categor√≠a",
	ROUND(AVG(F.length),2) as "Promedio_duraci√≥n"
FROM category as C
inner join film_category as FCT
	on FCT.category_id = C.category_id
inner join film as F
	ON F.film_id = FCT.film_id
GROUP BY c.name
HAVING AVG(f.length) > 110;


 -- 21. ¬øCu√°l es la media de duraci√≥n del alquiler de las pel√≠culas?

select 
	AVG (return_date - rental_date) as "duraci√≥n _alquiler"
from "rental"


-- 22. Crea una columna con el nombre y apellidos de todos los actores y actrices.
select 
	"first_name"||' '||"last_name"as "Nombre_apellido"
from "actor";

-- 23. N√∫meros de alquiler por d√≠a, ordenados por cantidad de alquiler de forma descendente.

SELECT 
    DATE("rental_date") AS dia,
    COUNT(*) AS cantidad_alquileres
FROM "rental"
GROUP BY DATE("rental_date")
ORDER BY cantidad_alquileres DESC;


-- 24.  Encuentra las pel√≠culas con una duraci√≥n superior al promedio.
select 
	title as "Pel√≠cula",
	length as "Duraci√≥n"
from film
where length > 
		(
		select AVG(length)
		from film
		)
order by length desc;


-- 25. Averigua el n√∫mero de alquileres registrados por mes.

select 
    extract(YEAR FROM rental_date) AS "a√±o",
   extract(MONTH FROM rental_date) AS "mes",
    COUNT(*) AS "cantidad_alquileres"
from rental
GROUP BY "a√±o", "mes"
ORDER BY "a√±o", "mes";


-- 26. Encuentra el promedio, la desviaci√≥n est√°ndar y varianza del total pagado.

select 
	round(AVG("amount"), 2) as "Promedio_pago",
	round(stddev("amount"), 2) as "Desviaci√≥n_estandar",
	round(variance("amount"), 2) as "Varianza"
from "payment";


-- 27. ¬øQu√© pel√≠culas se alquilan por encima del precio medio?
select 
	"title" as "Pel√≠cula",
	"rental_rate" as "Precio_alquiler"
from "film"
where "rental_rate" > 
		(
		select AVG("rental_rate")
		from "film"
		)
order by "rental_rate" DESC;

-- 28. Muestra el id de los actores que hayan participado en m√°s de 40 pel√≠culas.

select 
	"actor_id",
	COUNT("film_id") as "Cantidad_de_pel√≠culas"
from "film_actor" 
group by "actor_id"
having COUNT("film_id") > 40
order by "Cantidad_de_pel√≠culas"

-- 29. Obtener todas las pel√≠culas y, si est√°n disponibles en el inventario, mostrar la cantidad disponible.

select 
	F."title",
	F."film_id",
	COUNT(I.inventory_id) as "Disponibles"
from "film" as F
inner join "inventory" as I
	on I."film_id" = F."film_id"
left join "rental" as R
	on R."inventory_id" = I."inventory_id"
	and R.return_date is null 
group by F.title, F.film_id
order by "Disponibles";


-- 30. Obtener los actores y el n√∫mero de pel√≠culas en las que ha actuado.
select 
	A.first_name as "Nombre", 
	A.last_name as "Apellido",
	COUNT(f.film_id) as "Cantidad_de_peliculas_actuadas"
from actor as A
inner join film_actor as FA
	on A.actor_id = FA.actor_id
left join Film as F
	on F.film_id = FA.film_id
group by A.actor_id, A.first_name, A.last_name; 



--31.  Obtener todas las pel√≠culas y mostrar los actores que han actuado en ellas, incluso si algunas pel√≠culas no tienen actores asociados.

SELECT 
    F.title AS "Pel√≠cula",
    A.first_name AS "Nombre",
    A.last_name AS "Apellido"
FROM "film" AS F
LEFT JOIN "film_actor" AS FA
    ON F.film_id = FA.film_id
LEFT JOIN "actor" AS A
    ON A.actor_id = FA.actor_id
GROUP BY F.title, A.first_name, A.last_name
ORDER BY F.title;

-- 32. Obtener todos los actores y mostrar las pel√≠culas en las que han actuado, incluso si algunos actores no han actuado en ninguna pel√≠cula.

select 
	A.first_name as "Nombre", 
	A.last_name as "Apellido",
	F.title as "Pel√≠cula"
from actor as A
left join film_actor as FA
	on A.actor_id = FA.actor_id
left join Film as F
	on F.film_id = FA.film_id
group by A.first_name, A.last_name, F.title;


-- 33. Obtener todas las pel√≠culas que tenemos y todos los registros de alquiler.

select 
	F.title,
	R.rental_date
from film as F
left join inventory as I 
	on i.film_id = F.film_id
left join rental as R 
	on R.inventory_id = I.inventory_id
order by F.title, R.rental_date;

-- 34. Encuentra los 5 clientes que m√°s dinero se hayan gastado con nosotros.
select 
	C.first_name,
	C.last_name,
	C.email,
	SUM(P.amount) as "Total_gastado"
from customer as C
inner join payment as P
	on P.customer_id = C.customer_id
group by C.first_name, C.last_name, C.email
order by "Total_gastado"  DESC
limit 5;


-- 35. Selecciona todos los actores cuyo primer nombre es ' Johnny'.
select 
	first_name, 
	last_name 
from actor 
where LOWER(first_name) = LOWER('Johnny');


-- 36. Renombra la columna ‚Äúfirst_name‚Äù como Nombre y ‚Äúlast_name‚Äù como Apellido.
select 
	first_name as "Nombre",
	last_name as "Apellido"
from actor;

-- 37. Encuentra el ID del actor m√°s bajo y m√°s alto en la tabla actor.

select 
	MIN(actor_id) as "id_m√°s_bajo",
	MAX(actor_id) as "id_m√°s_alto"
from actor;

SELECT 
	first_name as "Nombre",
	last_name as "Apellido",
	actor_id
FROM actor
WHERE actor_id = (SELECT MIN(actor_id) 
	FROM actor)
   	OR actor_id = (SELECT MAX(actor_id) 
	FROM actor);


-- 38. Cuenta cu√°ntos actores hay en la tabla ‚Äúactor‚Äù

select 
	COUNT(actor_id)
from actor;

-- 39. Selecciona todos los actores y ord√©nalos por apellido en orden ascendente.

select 
	last_name as "Apellido",
	first_name as "Nombre",
	actor_id,
	last_update 
from actor 
order by last_name;


-- 40. Selecciona las primeras 5 pel√≠culas de la tabla ‚Äúfilm‚Äù

select *
from film 
limit 5;

--- COMENTARIO: La consigna es ambigua y creo que la consulta arriba mencionada finciona, pero para cumplir con buenas practicas y tener una consulta m√°s limpia creo que deberiamos usar: 

select 
	film_id, 
	title, 
	description, 
	release_year
from  film
order by film_id   
limit 5;

-- 41. Agrupa los actores por su nombre y cuenta cu√°ntos actores tienen el mismo nombre. ¬øCu√°l es el nombre m√°s repetido?

select 
	first_name, 
	COUNT(*)  as "cantidad"
from actor
group by first_name 
order by "cantidad" desc;


-- 42. Encuentra todos los alquileres y los nombres de los clientes que los realizaron.

select 	
	R.rental_id,
	C.first_name as "Nombre",
	c.last_name as "Apellido"
from rental as R
left join customer as C
	on C.customer_id = R.customer_id
order by R.rental_id;
	
-- 43. Muestra todos los clientes y sus alquileres si existen, incluyendo aquellos que no tienen alquileres.

select 
	C.customer_id,
	C.first_name as "Nombre",
	C.last_name as "Apellido",
	R.rental_id
from customer as C
left join rental as R
	on R.customer_id = C.customer_id
order by C.customer_id;


-- 44. Realiza un CROSS JOIN entre las tablas film y category. ¬øAporta valor esta consulta? ¬øPor qu√©? Deja despu√©s de la consulta la contestaci√≥n.

select *
from film as F
cross join category as Cat

--- COMENTARIO: No es un cruce que aporte valor ya que existe una tabla que es film_category que permit√≠ria cruces con m√°s valor, de ser necesarios. Este tipo de cruces genera una consulta muy pesada que podr√≠a relentizarla y hacerla de poca usabilidad. 


-- 45. Encuentra los actores que han participado en pel√≠culas de la categor√≠a 'Action'.

select 
	A.first_name as "Nombre",
	A.last_name as "Apellido",
	CAT."name" as "Categor√≠a"
from actor as A
inner join film_actor as FA
	on FA.actor_id = A.actor_id
inner join film as F
	on FA.film_id = FA.film_id 
inner join film_category as FCAT
	on FA.film_id = FCAT.film_id
inner join category as CAT
	on CAT.category_id = FCAT.category_id
where LOWER(CAT.name) = LOWER('Action');


-- 46. Encuentra todos los actores que no han participado en pel√≠culas.

SELECT 
    a.actor_id,
    a.first_name,
    a.last_name
FROM actor AS a
LEFT JOIN film_actor AS fa
    ON a.actor_id = fa.actor_id
WHERE fa.actor_id IS NULL;


-- 47. Selecciona el nombre de los actores y la cantidad de pel√≠culas en las que han participado.
SELECT
    a.first_name,
    a.last_name,
    COUNT(fa.film_id) AS total_peliculas
FROM actor AS a
INNER JOIN film_actor AS fa
    ON a.actor_id = fa.actor_id
GROUP BY a.actor_id, a.first_name, a.last_name
ORDER BY total_peliculas DESC;


-- 48. Crea una vista llamada ‚Äúactor_num_peliculas‚Äù que muestre los nombres de los actores y el n√∫mero de pel√≠culas en las que han participado.

 ---------- > vista creada con el nombre vist_actor_num_peliculas

-- 49. Calcula el n√∫mero total de alquileres realizados por cada cliente.

select 
	customer_id,
	COUNT(rental_id) as "alquileres_realizados"
from rental
group by customer_id
order by customer_id;

-- 50. Calcula la duraci√≥n total de las pel√≠culas en la categor√≠a 'Action'.

select 
	Cat.name as "Categor√≠a",
	SUM(F.length) as "Duraci√≥n total"
from category  as Cat
inner join film_category as FCat
	on FCat.category_id = Cat.category_id
inner join film as F
	on F.film_id = FCat.film_id
where Cat."name" = 'Action'
group by "Categor√≠a";



-- 51. Crea una tabla temporal llamada ‚Äúcliente_rentas_temporal‚Äù para almacenar el total de alquileres por cliente.

CREATE TEMP TABLE cliente_rentas_temporal AS
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_alquileres
FROM customer AS c
INNER JOIN rental AS r
    ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

SELECT * FROM cliente_rentas_temporal;


-- 52. Crea una tabla temporal llamada ‚Äúpeliculas_alquiladas‚Äù que almacene las pel√≠culas que han sido alquiladas al menos 10 veces.

CREATE TEMP TABLE peliculas_alquiladas AS
SELECT
    f.film_id,
    f.title,
    COUNT(r.rental_id) AS total_rentas
FROM film AS f
INNER JOIN inventory AS i
    ON f.film_id = i.film_id
INNER JOIN rental AS r
    ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
HAVING COUNT(r.rental_id) >= 10;

SELECT * FROM peliculas_alquiladas;

-- 53. Encuentra el t√≠tulo de las pel√≠culas que han sido alquiladas por el cliente con el nombre ‚ÄòTammy Sanders‚Äô y que a√∫n no se han devuelto. Ordena los resultados alfab√©ticamente por t√≠tulo de pel√≠cula.

select
 	C.first_name AS "Nombre",
    C.last_name  AS "Apellido",
    F.title as "T√≠tulo"
from customer as C
inner join rental as R
   on C.customer_id = R.customer_id
inner join inventory AS I
    ON R.inventory_id = I.inventory_id
inner join film AS F
    ON I.film_id = F.film_id
where LOWER(C.first_name) = LOWER('Tammy')
  and LOWER(C.last_name)  = LOWER('Sanders')
  and R.return_date IS NULL
order by f.title;


-- 54. Encuentra los nombres de los actores que han actuado en al menos una pel√≠cula que pertenece a la categor√≠a ‚ÄòSci-Fi‚Äô. Ordena los resultados alfab√©ticamente por apellido.

select distinct
    a.first_name as "Nombre",
    a.last_name  as "Apellido",
    c."name" as "Categor√≠a"
from actor as a
inner join film_actor as fa
    on a.actor_id = fa.actor_id
inner join film as f
    on fa.film_id = f.film_id
inner join film_category as fc
    on f.film_id = fc.film_id
inner join category as c
    on fc.category_id = c.category_id
where c.name = 'Sci-Fi'
order by a.last_name, a.first_name;


-- 55. Encuentra el nombre y apellido de los actores que han actuado en pel√≠culas que se alquilaron despu√©s de que la pel√≠cula ‚ÄòSpartacus Cheaper‚Äô se alquilara por primera vez. Ordena los resultados alfab√©ticamente por apellido.

SELECT DISTINCT
    a.first_name AS "Nombre",
    a.last_name  AS "Apellido"
FROM actor AS a
INNER JOIN film_actor AS fa
    ON a.actor_id = fa.actor_id
INNER JOIN film AS f
    ON fa.film_id = f.film_id
INNER JOIN inventory AS i
    ON f.film_id = i.film_id
INNER JOIN rental AS r
    ON i.inventory_id = r.inventory_id
WHERE r.rental_date >
      (
        SELECT MIN(r2.rental_date)
        FROM film AS f2
        INNER JOIN inventory AS i2
            ON f2.film_id = i2.film_id
        INNER JOIN rental AS r2
            ON i2.inventory_id = r2.inventory_id
        WHERE LOWER(f2.title) = LOWER('Spartacus Cheaper')
      )
ORDER BY a.last_name, a.first_name;

-- 56. Encuentra el nombre y apellido de los actores que no han actuado en ninguna pel√≠cula de la categor√≠a ‚ÄòMusic‚Äô

SELECT 
	a.first_name, 
	a.last_name
FROM actor as A
WHERE a.actor_id NOT IN(
    SELECT fa.actor_id
    FROM film_actor fa
    inner join film_category as FC
    	ON fa.film_id = fc.film_id
    inner join category as C
    	ON fc.category_id = c.category_id
    WHERE c.name = 'Music'
);


-- 57. Encuentra el t√≠tulo de todas las pel√≠culas que fueron alquiladas por m√°s de 8 d√≠as.

select 
	F.title as "Titulo",
	(R.return_date - R.rental_date) as "Duraci√≥n_del_alquiler"
from film as F
inner join inventory as I
	on F.film_id = I.film_id
inner join rental as R
	on I.inventory_id = R.inventory_id
where extract(day from(R.return_date - R.rental_date))> 8
order by "Duraci√≥n_del_alquiler" desc;


-- 58. Encuentra el t√≠tulo de todas las pel√≠culas que son de la misma categor√≠a que ‚ÄòAnimation‚Äô.

select
	F.title  as "T√≠tulo",
	C.name as "Categor√≠a"
from Film as F
inner join film_category as FCAT
	on F.film_id = FCAT.film_id
inner join category as C
	on C.category_id = FCAT.category_id
where LOWER(C.name) = LOWER('Animation');


-- 59. Encuentra los nombres de las pel√≠culas que tienen la misma duraci√≥n que la pel√≠cula con el t√≠tulo ‚ÄòDancing Fever‚Äô. Ordena los resultados alfab√©ticamente por t√≠tulo de pel√≠cula.
select 
	F.title as "Titulo",
	F.length as "Duraci√≥n"
from film as F
where length = (
		select f2.length  
		from film as f2
		where LOWER(f2.title) = LOWER('Dancing Fever')
		)
	order by f.title;

-- 60. Encuentra los nombres de los clientes que han alquilado al menos 7 pel√≠culas distintas. Ordena los resultados alfab√©ticamente por apellido.

SELECT
	cst.first_name,
	cst.last_name
FROM rental AS rnt
INNER JOIN inventory AS inv
	ON rnt.inventory_id = inv.inventory_id
INNER JOIN customer AS cst
	ON rnt.customer_id = cst.customer_id
GROUP BY cst.customer_id
HAVING COUNT(DISTINCT film_id) >= 7
ORDER BY cst.last_name ASC;


-- 61. Encuentra la cantidad total de pel√≠culas alquiladas por categor√≠a y 
muestra el nombre de la categor√≠a junto con el recuento de alquileres.

select 
	C.name as "Categor√≠a",
	COUNT(*) as "Recuento_alquieres"
from rental as R
inner join inventory as I
	on I.inventory_id = R.inventory_id
inner join film as F
	on F.film_id = I.film_id
inner join film_category as FC
	on FC.film_id = F.film_id
inner join category as C
	on C.category_id = FC.category_id
group by C.name
order by "Recuento_alquieres";


-- 62. Encuentra el n√∫mero de pel√≠culas por categor√≠a estrenadas en 2006.

select 
	C."name" as "Categor√≠a",
	COUNT(F.release_year) as "cantidad_de_pel√≠culas"
from category as C
inner join film_category as FC
	on FC.category_id = C.category_id
inner join film as F
	on F.film_id = FC.film_id
where F.release_year = '2006' 
group by C."name"
order by "cantidad_de_pel√≠culas";

-- 63. Obt√©n todas las combinaciones posibles de trabajadores con las tiendas que tenemos.

select
    S.staff_id,
    S.first_name || ' ' || s.last_name as "Empleado",
    ST.store_id,
    ST.address_id
from staff as S
cross join store as ST
order by S.staff_id , ST.store_id;


-- 64. Encuentra la cantidad total de pel√≠culas alquiladas por cada cliente y muestra el ID del cliente, su nombre y apellido junto con la cantidad de pel√≠culas alquiladas.
SELECT
	cst.customer_id,
	cst.first_name,
	cst.last_name,
	COUNT(inv.film_id) AS Alquiladas
FROM rental AS rnt
INNER JOIN inventory AS inv
	ON rnt.inventory_id = inv.inventory_id
INNER JOIN customer AS cst
	ON rnt.customer_id = cst.customer_id
GROUP BY cst.customer_id, cst.first_name, cst.last_name;

